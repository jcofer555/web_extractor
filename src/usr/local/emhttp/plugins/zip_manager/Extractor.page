Menu="DiskUtilities"
Type="xmenu"
Title="Extractor"
Icon="unzip.png"
Tag="unzip.png"
Markdown="false"
---

<?php
session_start();
while (ob_get_level())
  ob_end_clean(); // Clear any existing buffers
ob_implicit_flush(true); // Enable auto-flushing
$logDir = '/boot/config/plugins/zip_manager/logs';

if (!is_dir($logDir)) {
  mkdir($logDir, 0755, true);
}
$lastExtractLog = '/boot/config/plugins/zip_manager/logs/last_extracted_output.log';
$lastListLog = '/boot/config/plugins/zip_manager/logs/last_check_archive_output.log';
$logFile = '/boot/config/plugins/zip_manager/logs/extract_history.log';
$showPasswordField = false;
$root = '/mnt/';
$allowedExtensions = [
  '7z',
  'zip',
  'rar',
  'tar',
  'gz',
  'bz2',
  'xz',
  'lzma',
  'z',
  'cab',
  'arj',
  'iso',
  'udf',
  'wim',
  'dmg',
  'vhd',
  'vmdk',
  'msi',
  'deb',
  'rpm',
  'cpio',
  'chm',
  'nsis',
  'exe',
  'tar.gz',
  'tar.bz2',
  'tar.xz',
  'tar.zst',
  'lzh',
  'lha',
  'ace',
  'zst',
  'img'
];

$extractionResult = '';
$previewResult = '';
$isFilePicker = isset($_GET['filepicker']);
$isDestPicker = isset($_GET['destpicker']);

// Separate navigation states
$filePath = $root;
$fileRelPath = '';
$destPath = $root;
$destRelPath = '';

if ($isFilePicker) {
  $browse = $_GET['browse_file'] ?? '';
  $filePath = realpath($root . $browse) ?: $root;
  if (strpos($filePath, $root) !== 0 || !is_dir($filePath))
    $filePath = $root;
  $fileRelPath = trim(str_replace($root, '', $filePath), '/');
}

if ($isDestPicker) {
  $browse = $_GET['browse_dest'] ?? '';
  $destPath = realpath($root . $browse) ?: $root;
  if (strpos($destPath, $root) !== 0 || !is_dir($destPath))
    $destPath = $root;
  $destRelPath = trim(str_replace($root, '', $destPath), '/');
}

function logExtraction($filePath, $destination, $status)
{
  global $logFile;
  $logFile = '/boot/config/plugins/zip_manager/logs/extract_history.log';
  $timestamp = date('Y-m-d H:i:s');

  $entry = "[$timestamp] $status: $filePath ‚Üí $destination\n";

  // Create file if it doesn't exist
  if (!file_exists($logFile)) {
    file_put_contents($logFile, '');
    // Set ownership and permissions
    @chown($logFile, 'nobody');
    @chgrp($logFile, 'users');
    chmod($logFile, 0644);
  }

  // Append the new entry
  file_put_contents($logFile, $entry, FILE_APPEND | LOCK_EX);

  // Trim to last 5 lines
  $lines = file($logFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
  $lastFive = array_slice($lines, -10);
  file_put_contents($logFile, implode("\n", $lastFive) . "\n", LOCK_EX);
}

function formatBytes($bytes, $precision = 2)
{
  $units = ['B', 'KB', 'MB', 'GB', 'TB'];
  $bytes = max($bytes, 0);
  $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
  $pow = min($pow, count($units) - 1);
  return round($bytes / pow(1024, $pow), $precision) . ' ' . $units[$pow];
}

function renderBreadcrumb($base, $current, $queryKey, $extra = [])
{
  $rel = trim(str_replace($base, '', $current), '/');
  $parts = $rel === '' ? [] : explode('/', $rel);
  $breadcrumbs = [];

  // Root label /mnt (clickable)
  $query = array_merge([$queryKey => ''], $extra);
  $breadcrumbs[] = '<a href="?' . http_build_query($query) . '">/mnt</a>';

  $path = '';
  foreach ($parts as $part) {
    $path .= '/' . $part;
    $query = array_merge([$queryKey => ltrim($path, '/')], $extra);
    $breadcrumbs[] = '<a href="?' . http_build_query($query) . '">' . htmlspecialchars($part) . '</a>';
  }

  return '<div class="current-dir-container"><strong class="current-dir-label">Current Directory:</strong>'
    . '<span class="breadcrumb">' . implode(' <span class="breadcrumb-sep">-></span> ', $breadcrumbs) . '</span></div>';
}

// Selected values
$selectedFile = $_GET['file'] ?? $_POST['selected_file'] ?? '';
$selectedDestRel = $_GET['dest'] ?? $_POST['destination'] ?? '';
$selectedDestFull = $selectedDestRel ? $root . ltrim($selectedDestRel, '/') : '';
if (!isset($_SESSION['extract_password'])) {
  $_SESSION['extract_password'] = '';
}

if (isset($_POST['extract_password'])) {
  $_SESSION['extract_password'] = $_POST['extract_password'];
}
$archivePassword = $_SESSION['extract_password'];

$showPasswordField = false;
if (!empty($selectedFile) && file_exists($selectedFile)) {
  $ext = strtolower(pathinfo($selectedFile, PATHINFO_EXTENSION));
  if (preg_match('/\.tar\.gz$/i', $selectedFile)) {
    $ext = 'tar.gz';
  }

  if ($ext === '7z') {
    // Always run the dummy scan to detect encryption
    $dummyPass = "-pWRONGPASS";
    exec("/usr/bin/7zzs l $dummyPass " . escapeshellarg($selectedFile) . " 2>&1", $listOutput);
    foreach ($listOutput as $line) {
      if (stripos($line, 'Wrong password') !== false || stripos($line, 'Can not open encrypted archive') !== false) {
        $showPasswordField = true;
        break;
      }
    }
  }
}

// Clear logic
if (isset($_POST['clear'])) {
  unset($_SESSION['extract_password']);
  echo '<script>window.location.href = "' . strtok($_SERVER["REQUEST_URI"], '?') . '";</script>';
  return;
}

// Preview or extract
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['selected_file'])) {
  $password = trim($_POST['extract_password'] ?? '');
  $passArg = $password !== '' ? "-p" . escapeshellarg($password) : '';
  $filePath = $_POST['selected_file'];
  $destination = $_POST['destination'] ?? '';
  $destination = preg_replace('#/+#', '/', $destination);
  $destination = str_starts_with($destination, $root) ? $destination : $root . ltrim($destination, '/');
  $confirmed = isset($_POST['proceed']);

  if (!file_exists($filePath)) {
    $extractionResult = "<pre>‚ùå No valid file selected.</pre><hr>";
  } else {
    $isPreview = isset($_POST['preview']) && !isset($_POST['extract']);
    $isExtract = isset($_POST['extract']);
    $maxSizeBytes = 500 * 1024 * 1024; // 500 MB max size for extraction only

    // Only enforce limit for extraction
    if ($isExtract && filesize($filePath) > $maxSizeBytes) {
      $extractionResult = "<p style='color: red; font-size: 1.2em;'>‚ùå Archive file is too large. Maximum allowed size for extraction is 500 MB.</p><hr>";
    } else {
      $filename = basename($filePath);

      if (preg_match('/\.tar\.gz$/i', $filename))
        $ext = 'tar.gz';

      if (!in_array($ext, $allowedExtensions)) {
        $extractionResult = "<pre>‚ùå Invalid file type: .$ext</pre><hr>";
      } elseif ($isPreview) {
        if (!$destination || !is_dir($destination)) {
          $extractionResult = "<pre>‚ùå Please select a valid destination folder before extracting.</pre><hr>";
          return;
        }

        $password = trim($_POST['extract_password'] ?? '');
        $passArg = $password !== '' ? "-p" . escapeshellarg($password) : '';

        exec("/usr/bin/7zzs l -ba $passArg " . escapeshellarg($filePath) . " 2>&1", $output, $exitCode);
		file_put_contents('/boot/config/plugins/zip_manager/logs/last_check_archive_output.log', implode("\n", $output));

        $outputText = implode("\n", $output);
        $previewFailed = false;

        if (
          stripos($outputText, 'Wrong password') !== false ||
          stripos($outputText, 'Can not open encrypted archive') !== false ||
          stripos($outputText, 'Break signaled') !== false
        ) {
          $previewFailed = true;
        }

        if ($previewFailed) {
          $previewResult = "<p style='color: red; font-weight: bold;'>‚ùå Archive is encrypted. Please enter the correct password to preview contents.</p>";
        } else {
          $filtered = array_filter($output, fn($line) => trim($line) !== '' && !str_starts_with($line, 'Listing archive:'));
          $previewResult = "<div class='preview-box'><strong>üì¶ Archive Contents:</strong><br><pre>" . htmlspecialchars(implode("\n", $filtered)) . "</pre></div>";
        }
      } elseif ($isExtract) {
        $conflicts = [];
        $files = [];
        $inListing = false;

        exec("/usr/bin/7zzs l " . escapeshellarg($filePath), $listing);
        foreach ($listing as $line) {
          if (preg_match('/^-+$/', $line)) {
            $inListing = !$inListing;
            continue;
          }
          if ($inListing && preg_match('/^\d{4}-\d{2}-\d{2}/', $line)) {
            $parts = preg_split('/\s{2,}/', $line);
            $filename = end($parts);
            if ($filename && substr($filename, -1) !== '/') {
              $files[] = $filename;
            }
          }
        }

        foreach ($files as $relative) {
          $targetPath = rtrim($destination, '/') . '/' . $relative;
          if (file_exists($targetPath)) {
            $conflicts[] = $relative;
          }
        }

        if (count($conflicts) > 0 && !$confirmed) {
          $extractionResult = "<pre>‚ö†Ô∏è The following files already exist in the destination:\n\n";
          foreach ($conflicts as $conflict) {
            $extractionResult .= " - $conflict\n";
          }
          $extractionResult .= "\nPlease confirm to proceed with overwriting.</pre>";
 // Overwrite confirmation form
    $extractionResult .= '<form method="post" style="display: inline-block; margin-right: 1em;">';
    $extractionResult .= '<input type="hidden" name="selected_file" value="' . htmlspecialchars($filePath) . '">';
    $extractionResult .= '<input type="hidden" name="destination" value="' . htmlspecialchars($destination) . '">';
    $extractionResult .= '<input type="hidden" name="extract" value="1">';
    $extractionResult .= '<input type="hidden" name="proceed" value="1">';
    $extractionResult .= '<input type="hidden" name="extract_password" value="' . htmlspecialchars($archivePassword) . '">';
    $extractionResult .= '<input type="submit" value="‚úÖ Overwrite">';
    $extractionResult .= '</form>';

    // Cancel button
    $extractionResult .= '<form method="post" style="display: inline-block;">';
    $extractionResult .= '<input type="submit" name="clear" value="‚ùå Cancel">';
    $extractionResult .= '</form><hr>';
        } else {
          // ‚úÖ Show processing message before extraction
          echo '<div id="processing-message" style="color: orange; font-weight: bold;">‚è≥ Extracting archive, please wait...</div>';
          echo str_repeat(' ', 1024); // Force buffer flush
          flush();
          if (function_exists('ob_flush'))
            ob_flush();

          $cmd = "/usr/bin/7zzs x $passArg " . escapeshellarg($filePath) . " -o" . escapeshellarg($destination) . " -y";
          exec($cmd . " 2>&1", $output, $resultCode);
          file_put_contents($lastExtractLog, implode("\n", $output));

          if ($resultCode === 0) {
            // Get list of extracted files from archive
            $extractedPaths = [];
            exec("/usr/bin/7zzs l -ba $passArg " . escapeshellarg($filePath) . " 2>&1", $listOutput);

            foreach ($listOutput as $line) {
              if (preg_match('/^\d{4}-\d{2}-\d{2}/', $line)) {
                $parts = preg_split('/\s{2,}/', $line);
                $relative = end($parts);
                if ($relative && substr($relative, -1) !== '/') {
                  $extractedPaths[] = rtrim($destination, '/') . '/' . $relative;
                }
              }
            }

// Apply ownership and permissions
$logFile = '/boot/config/plugins/zip_manager/logs/last_extracted_owner_permission_change_output.log';
$timestamp = date('[Y-m-d H:i:s]');
$logEntry = "$timestamp Applying ownership and permissions:\n";

foreach ($extractedPaths as $originalPath) {
    $path = realpath($originalPath);

    if ($path === false || !file_exists($path)) {
        $logEntry .= "Skipped (not found): $originalPath\n";
        continue;
    }

    $escaped = escapeshellarg($path);

    if (is_dir($path)) {
        $chownOutput = shell_exec("chown -v nobody:users $escaped 2>&1");
        $chmodOutput = shell_exec("chmod -v 755 $escaped 2>&1");
        $logEntry .= "Directory: $path\nchown output:\n$chownOutput\nchmod output:\n$chmodOutput\n\n";
    } elseif (is_file($path)) {
        $chownOutput = shell_exec("chown -v nobody:users $escaped 2>&1");
        $chmodOutput = shell_exec("chmod -v 644 $escaped 2>&1");
        $logEntry .= "File: $path\nchown output:\n$chownOutput\nchmod output:\n$chmodOutput\n\n";
    } else {
        $logEntry .= "Unknown type (skipped): $path\n";
    }
}

file_put_contents($logFile, $logEntry);
          }

          if ($resultCode === 0) {
            logExtraction($filePath, $destination, '‚úÖ Success');
            $extractionResult = "<p style='color: green; font-size: 1.2em;'>‚úÖ Extraction Successful</p>";
			unset($_SESSION['extract_password']);
            $selectedFile = '';
            $selectedDestFull = '';
            $selectedDestRel = '';

          } else {
            logExtraction($filePath, $destination, "‚ùå Failed (code $resultCode)");
            $extractionResult = "<p style='color: red; font-size: 1.2em;'>‚ùå Extraction failed (code $resultCode)</p>";
          }
          echo "<script>
  const msg = document.getElementById('processing-message');
  if (msg) msg.remove();
</script>";
        }
      }
    }
  }
}
?>
<style>
  body {
    font-family: sans-serif;
    margin: 2em;
  }

  .form-row {
    display: flex;
    align-items: flex-start;
    margin-top: 1em;
  }

  .form-row label {
    width: 180px;
    font-weight: bold;
    padding-top: 6px;
  }

  .form-row input[type="text"] {
    flex: 1;
    padding: 6px;
    cursor: pointer;
  }

  .folder-list {
    margin-top: 1em;
    padding-left: 1em;
    border-left: 2px solid #ccc;
    max-height: 300px;
    overflow-y: auto;
    background: #fff;
  }

  .folder-list a {
    text-decoration: none;
    color: orange;
    background: white;
    padding: 4px 8px;
    border-radius: 4px;
    display: block;
    margin: 4px 0;
  }

  .folder-list a:hover {
    background: #ffe5cc;
  }

  .file-entry {
    color: green;
  }

  .folder-list input[type="checkbox"] {
    width: 16px;
    height: 16px;
    accent-color: orange;
  }

  .preview-box {
    margin-top: 2em;
    padding: 1em;
    background: #fff8f0;
    border: 1px solid orange;
    border-radius: 5px;
    white-space: pre-wrap;
    color: #333;
  }

  .disabled-entry {
    color: green;
  }

  .current-dir-container {
    margin-bottom: 0.5em;
    font-size: 1em;
    color: #444;
  }

  .current-dir-container strong {
    margin-right: 0.5em;
  }

  .breadcrumb {
    color: #333;
    white-space: nowrap;
  }

  .breadcrumb a {
    color: orange;
    text-decoration: none;
    display: inline;
  }

  .breadcrumb a:hover {
    color: red;
    text-decoration: underline;
  }

  .current-dir-label {
    color: orange;
    margin-right: 0.5em;
  }

  .breadcrumb-sep {
    color: orange;
  }
</style>

<?php
// Dynamically generate the Archiver page URL with CSRF token
$csrfToken = $_GET['csrf_token'] ?? ''; // Or retrieve from session if needed
$archiverUrl = "/Tools/Archiver" . ($csrfToken ? "?csrf_token=" . urlencode($csrfToken) : '');
?>

<div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 0.1em;">
  <h2 style="margin: 0;">Extract archive using 7-zip</h2>

  <!-- Button container -->
  <div style="display: flex; flex-direction: row; gap: 0.5em; align-items: flex-start; margin-left: 1em;">
    <!-- Extractor Page -->
    <form action="<?= htmlspecialchars($archiverUrl) ?>" method="get" style="margin: 0;">
      <input type="submit" value="üì§ Archiver Page" style="margin-top: 0.1em;">
    </form>

    <!-- Support Forum -->
    <form action="https://forums.unraid.net/topic/191678-7-zip-for-unraid/" method="get" target="_blank"
      style="margin: 0;">
      <input type="submit" value="‚ùì Support Forum" style="margin-top: 0.1em;">
    </form>

    <!-- Generate Diagnostics ZIP -->
    <form method="post" style="margin: 0;">
      <input type="submit" name="generate_diagnostics" value="üõ†Ô∏è Generate Diagnostics" style="margin-top: 0.1em;">
    </form>
  </div>
</div>

<div style="display: flex;">
  <div style="margin-left: auto; width: 240px;">
    <?php
    if (isset($_POST['generate_diagnostics'])) {
      $diagFolder = '/boot/config/plugins/zip_manager/zip_manager_diagnostics';
      $diagZip = '/boot/config/plugins/zip_manager/zip_manager_diagnostics.zip';
      $debugLog = '/boot/config/plugins/zip_manager/logs/zip_manager_diagnostic_debug.log';

      // Cleanup previous
      @exec("rm -rf " . escapeshellarg($diagFolder));
      @unlink($diagZip);
      @unlink($debugLog);

      mkdir($diagFolder, 0755, true);

      // Files to redact + copy
      $logFiles = [
        'archive_history.log',
        'extract_history.log',
        'last_archived_output.log',
        'last_extracted_output.log',
        'last_check_archive_output.log',
        'last_archived_owner_permission_change_output.log',
        'last_extracted_owner_permission_change_output.log',
      ];

      foreach ($logFiles as $filename) {
        $src = "/boot/config/plugins/zip_manager/logs/$filename";
        $dest = "$diagFolder/$filename";

        if (!file_exists($src))
          continue;

        $content = file_get_contents($src);

        // üîí Redact full paths
        $excludedPaths = ['/usr/bin/7zzs'];
        $lines = explode("\n", $content);
        $redactedLines = [];

        foreach ($lines as $line) {
          $srcAssigned = false;
          $destAssigned = false;

          $line = preg_replace_callback(
            '#[\'"]?(/mnt/[^\'"\s‚Üí\n\r]+(?:/[^\'"\s‚Üí\n\r]*)*)[\'"]?#',
            function ($match) use (&$srcAssigned, &$destAssigned, $excludedPaths) {
              $path = $match[1];

              // Skip excluded paths
              foreach ($excludedPaths as $excluded) {
                if (strpos($path, $excluded) === 0) {
                  return $match[0]; // leave unchanged
                }
              }

              if (!$srcAssigned) {
                $srcAssigned = true;
                return '[SRC]';
              } elseif (!$destAssigned) {
                $destAssigned = true;
                return '[DEST]';
              } else {
                return '[REDACTED]';
              }
            },
            $line
          );

          $redactedLines[] = $line;
        }

        $content = implode("\n", $redactedLines);



        // üîí Redact filenames in last_check_archive_output.log
        if ($filename === 'last_check_archive_output.log') {
          $lines = explode("\n", $content);
          $redactedLines = array_map(function ($line) {
            // Match: date time flags size size filename
            if (preg_match('/^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\s+.+?\s+\d+\s+\d+\s+)(.+)$/', $line, $matches)) {
              return $matches[1] . '[REDACTED_FILENAME]';
            }
            return $line;
          }, $lines);
          $content = implode("\n", $redactedLines);
        }

        file_put_contents($dest, $content);
      }

      // Redacted system info (remove hostname)
      $hostname = php_uname('n');
      $plgFile = '/boot/config/plugins/zip_manager.plg';

      if (file_exists($plgFile)) {
        $raw = file_get_contents($plgFile);
        libxml_use_internal_errors(true);
        $xml = simplexml_load_string($raw);
        if ($xml === false) {
          echo "Failed to parse XML.";
          foreach (libxml_get_errors() as $error) {
            echo "<br>", htmlspecialchars($error->message);
          }
        } else {
          $version = (string) $xml['version'] ?? 'unknown';
        }
      }

      $sysInfo = "Generated: " . date('Y-m-d H:i:s') . "\n";
      $sysInfo .= str_replace($hostname, '[REDACTED_HOST]', php_uname()) . "\n";
      $sysInfo .= "PHP Version: " . phpversion() . "\n";
      $sysInfo .= "Plugin Version: " . $version . "\n";

      file_put_contents("$diagFolder/system_info.log", $sysInfo);

      // Create ZIP
      $cmd = "/usr/bin/7zzs a -tzip " . escapeshellarg($diagZip) . " " . escapeshellarg($diagFolder) . " 2>&1";
      exec($cmd, $zipOutput, $exitCode);
      file_put_contents($debugLog, implode("\n", $zipOutput));

      // Delete diagnostics folder after zip created
      exec("rm -rf " . escapeshellarg($diagFolder));

      if (file_exists($diagZip)) {
        echo "<p style='color:green;'>‚úÖ Diagnostics created: <a href='/boot/config/plugins/zip_manager/" . basename($diagZip) . "' download>Download ZIP</a></p>";
      } else {
        echo "<p style='color:red;'>‚ùå Failed to create diagnostics zip (code $exitCode)</p>";
      }
    }
    ?>
  </div>
</div>

<div id="processing-message" style="display: none; color: orange; font-weight: bold; margin-top: 1em;">
  ‚è≥ Processing, please wait...
</div>

<form method="post" id="extract-form">
  <div class="form-row">
    <label>File to extract:</label>
    <div style="position: relative; display: inline-block;">
      <input type="text" name="selected_file_display" readonly value="<?= htmlspecialchars($selectedFile) ?>"
        onclick="window.location='?filepicker=1&browse_file=<?= urlencode($fileRelPath) ?>&file=<?= urlencode($selectedFile) ?>&dest=<?= urlencode($selectedDestRel) ?>'"
        style="width: 300px; padding-right: 1em;">
      <?php if (empty($selectedFile)): ?>
        <span style="
      position: absolute;
      left: 8px;
      top: 50%;
      transform: translateY(-50%);
      color: #aaa;
      pointer-events: none;
      font-style: italic;
    ">Click to browse</span>
      <?php endif; ?>
    </div>
  </div>

  <?php if (!empty($selectedFile) && $showPasswordField): ?>
    <div class="form-row" id="password_row">
      <label>Archive password:</label>
      <div style="position: relative; display: inline-block;">
        <input type="password" name="extract_password" id="extract_password"
          value="<?= htmlspecialchars($archivePassword) ?>" style="width: 300px; padding-right: 1em;">
        <?php if (empty($archivePassword)): ?>
          <span style="
      position: absolute;
      left: 8px;
      top: 50%;
      transform: translateY(-50%);
      color: #aaa;
      pointer-events: none;
      font-style: italic;
    ">Required</span>
        <?php endif; ?>
      </div>
    </div>
  <?php endif; ?>

  <div class="form-row">
    <label>Destination folder:</label>
    <div style="position: relative; display: inline-block;">
      <input type="text" name="destination_display" readonly value="<?= htmlspecialchars($selectedDestFull) ?>"
        onclick="window.location='?destpicker=1&browse_dest=<?= urlencode($destRelPath) ?>&file=<?= urlencode($selectedFile) ?>&dest=<?= urlencode($selectedDestRel) ?>'"
        style="width: 300px; padding-right: 1em;">
      <?php if (empty($selectedDestFull)): ?>
        <span style="
      position: absolute;
      left: 8px;
      top: 50%;
      transform: translateY(-50%);
      color: #aaa;
      pointer-events: none;
      font-style: italic;
    ">Click to browse</span>
      <?php endif; ?>
    </div>
  </div>

  <input type="hidden" name="selected_file" value="<?= htmlspecialchars($selectedFile) ?>">
  <input type="hidden" name="destination" value="<?= htmlspecialchars($selectedDestFull) ?>">

  <div style="margin-top: 1.5em;">
    <input type="submit" name="preview" value="üîç Check Archive" <?= $selectedFile ? '' : 'disabled' ?>>
    <input type="submit" name="extract" value="üì§ Extract" <?= ($selectedFile && $selectedDestFull) ? '' : 'disabled' ?>>
    <input type="submit" name="clear" value="‚ôªÔ∏è Reset Form">
  </div>
</form>

<?php if (!empty($selectedFile) && file_exists($selectedFile)): ?>
  <?php
  $selSize = filesize($selectedFile);
  $overLimit = $selSize > 500 * 1024 * 1024;
  ?>
  <div class="form-row" style="align-items: center;">
    <label style="margin-bottom: 0;">Total size:</label>
    <div style="padding-top: 6px; font-weight: bold; color: <?= $overLimit ? 'red' : 'green' ?>;">
      <?= formatBytes($selSize) ?> / 500 MB limit
    </div>
  </div>
<?php endif; ?>
<br>
<?php if ($isFilePicker): ?>
  <div id="file-picker-container">
    <?= renderBreadcrumb($root, $filePath, 'browse_file', [
      'filepicker' => 1,
      'file' => $selectedFile,
      'dest' => $selectedDestRel
    ]) ?>

    <div class="folder-list">
      <?php
      $excludedFolders = ['user0', 'rootshare', 'addons'];

      if ($filePath !== $root) {
        $parent = dirname($filePath);
        echo '<a href="?filepicker=1&browse_file=' . urlencode(trim(str_replace($root, '', $parent), '/')) .
          '&file=' . urlencode($selectedFile) .
          '&dest=' . urlencode($selectedDestRel) . '">‚¨ÜÔ∏è Up</a>';
      }

      $entries = scandir($filePath);
      $folders = [];
      $files = [];

      foreach ($entries as $entry) {
        if ($entry === '.' || $entry === '..')
          continue;
        if (in_array($entry, $excludedFolders))
          continue;

        $fullPath = $filePath . '/' . $entry;
        if (is_dir($fullPath)) {
          $folders[] = $entry;
        } else {
          $files[] = $entry;
        }
      }

      // Sort folders and files alphabetically (case-insensitive natural sort)
      sort($folders, SORT_NATURAL | SORT_FLAG_CASE);
      sort($files, SORT_NATURAL | SORT_FLAG_CASE);

      // Output folders first
      foreach ($folders as $entry) {
        $path = $filePath . '/' . $entry;
        $real = realpath($path);
        if (!$real || $real === rtrim($root, '/'))
          continue;

        $browseRel = trim(str_replace($root, '', $path), '/');
        $browseUrl = '?filepicker=1&browse_file=' . urlencode($browseRel) .
          '&file=' . urlencode($selectedFile) .
          '&dest=' . urlencode($selectedDestRel);

        echo '<div style="display:flex; align-items:center; gap:0.5em;">';
        echo '<a href="' . $browseUrl . '">üìÇ ' . htmlspecialchars($entry) . '</a>';
        echo '</div>';
      }

      // Then output files
      foreach ($files as $entry) {
        $path = $filePath . '/' . $entry;
        $real = realpath($path);
        if (!$real || $real === rtrim($root, '/'))
          continue;

        $ext = strtolower(pathinfo($entry, PATHINFO_EXTENSION));
        if (preg_match('/\.tar\.gz$/i', $entry))
          $ext = 'tar.gz';

        $relativePath = trim(str_replace($root, '', $real), '/');
        $depth = substr_count($relativePath, '/');
        $isTopLevel = ($depth === 0);
        $isSelectable = is_file($path) && in_array($ext, $allowedExtensions) && !$isTopLevel;
        $isSelected = ($selectedFile === $real);

        // üîΩ NEW: File size info
        $fileSize = is_file($path) ? filesize($path) : 0;
        $tooLarge = $fileSize > (500 * 1024 * 1024);
        $sizeColor = $tooLarge ? 'red' : 'gray';
        $fileLabel = $tooLarge ? "‚ùå" : "üìÑ";
        $formattedSize = formatBytes($fileSize);

        $toggleUrl = '?filepicker=1&browse_file=' . urlencode($fileRelPath) .
          '&file=' . urlencode($isSelected ? '' : $real) .
          '&dest=' . urlencode($selectedDestRel);

        echo '<div style="display:flex; align-items:center; gap:0.5em;">';
        echo '<label style="cursor:pointer; display:flex; align-items:center; gap:0.5em;">';
        echo '<input type="checkbox" style="width:16px; height:16px;" ' .
          ($isSelected ? 'checked ' : '') .
          ($isSelectable
            ? 'onclick="event.stopPropagation(); window.location=\'' . $toggleUrl . '\';"'
            : 'disabled title="Top-level files under /mnt cannot be selected" style="visibility:visible;"') .
          '>';
        echo '</label>';

        if ($isSelectable) {
          echo '<span class="file-entry">' . $fileLabel . ' ' . htmlspecialchars($entry) .
            ' <span style="color: ' . $sizeColor . '; font-size: 0.9em;">(' . $formattedSize . ')</span></span>';
        } else {
          echo '<span class="disabled-entry">' . $fileLabel . ' ' . htmlspecialchars($entry) .
            ' <span style="color: ' . $sizeColor . '; font-size: 0.9em;">(' . $formattedSize . ')</span></span>';
        }

        echo '</div>';
      }

      ?>
    </div>
  </div>
<?php endif; ?>

<?php if ($isDestPicker): ?>
  <div id="dest-picker-container">
    <?= renderBreadcrumb($root, $destPath, 'browse_dest', [
      'destpicker' => 1,
      'file' => $selectedFile,
      'dest' => $selectedDestRel
    ]) ?>

    <div class="folder-list">
      <?php
      $excludedFolders = ['user0', 'rootshare', 'addons'];

      if ($destPath !== $root) {
        $parent = dirname($destPath);
        echo '<a href="?destpicker=1&browse_dest=' . urlencode(trim(str_replace($root, '', $parent), '/')) .
          '&file=' . urlencode($selectedFile) .
          '&dest=' . urlencode($selectedDestRel) . '">‚¨ÜÔ∏è Up</a>';
      }

      $entries = scandir($destPath);
      $folders = [];

      foreach ($entries as $entry) {
        if ($entry === '.' || $entry === '..')
          continue;
        if (in_array($entry, $excludedFolders))
          continue;

        $fullPath = $destPath . '/' . $entry;
        if (is_dir($fullPath)) {
          $folders[] = $entry;
        }
      }

      sort($folders, SORT_NATURAL | SORT_FLAG_CASE);

      foreach ($folders as $entry) {
        $path = $destPath . '/' . $entry;
        $real = realpath($path);
        if (!$real || $real === rtrim($root, '/'))
          continue;

        $normalized = preg_replace('#/+#', '/', $real);
        $relativePath = trim(str_replace($root, '', $normalized), '/');
        $depth = substr_count($relativePath, '/');
        $isTopLevel = ($depth === 0);
        $isSelected = ($selectedDestFull === $normalized);

        $toggleUrl = '?destpicker=1&browse_dest=' . urlencode($destRelPath) .
          '&file=' . urlencode($selectedFile) .
          '&dest=' . urlencode($isSelected ? '' : trim(str_replace($root, '', $normalized), '/'));

        $browseRel = trim(str_replace($root, '', $path), '/');
        $browseUrl = '?destpicker=1&browse_dest=' . urlencode($browseRel) .
          '&file=' . urlencode($selectedFile) .
          '&dest=' . urlencode($selectedDestRel);

        echo '<div style="display:flex; align-items:center; gap:0.5em;">';
        echo '<label style="cursor:pointer; display:flex; align-items:center; gap:0.5em;">';
        echo '<input type="checkbox" ' . ($isSelected ? 'checked' : '') .
          ($isTopLevel ? ' disabled title="Top-level folders like /mnt/' . htmlspecialchars($entry) . ' cannot be selected as a destination."' : '') .
          ' onclick="event.stopPropagation(); window.location=\'' . $toggleUrl . '\';">';
        echo '</label>';
        echo '<a href="' . $browseUrl . '">üìÇ ' . htmlspecialchars($entry) . '</a>';
        echo '</div>';
      }
      ?>
    </div>
  </div>
<?php endif; ?>

<?= $previewResult ?>
<?= $extractionResult ?>

<?php
// Read the last 5 lines
$historyLines = file_exists($logFile) ? array_slice(file($logFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES), -10) : [];

echo '<br><details open><summary style="font-size: 1.2em;"><strong>üìú Extraction History</strong></summary>';
echo "<div style='font-size: 1.2em; margin-top: 0.5em; white-space: pre-wrap;'>";
echo $historyLines ? htmlspecialchars(implode("\n", $historyLines)) : "No extractions yet";
echo "</div></details>";

if (isset($_POST['clear_history'])) {
  // üîç Debug: Check file status before clearing
  if (!file_exists($logFile)) {
    echo "<pre>‚ö†Ô∏è Log file does not exist: $logFile</pre>";
  } elseif (!is_writable($logFile)) {
    echo "<pre>‚ö†Ô∏è Log file is not writable: $logFile</pre>";
  } else {
    echo "<pre>‚úÖ Log file exists and is writable</pre>";
  }

  // üßº Attempt to clear the file
  $fp = @fopen($logFile, 'w');
  if ($fp) {
    fclose($fp); // Truncate the file
    @chown($logFile, 'nobody');
    @chgrp($logFile, 'users');
    chmod($logFile, 0644);
    $redirectUrl = strtok($_SERVER["REQUEST_URI"], '?');
    $redirectUrl .= '?file=' . urlencode($selectedFile) . '&dest=' . urlencode($selectedDestRel);
    echo "<script>window.location.href = '$redirectUrl';</script>";
  } else {
    echo "<pre>‚ùå Failed to open log file for clearing: $logFile</pre>";
  }
  return;
}
?>

<form method="post" style="margin-top: 0.5em;">
  <input type="submit" name="clear_history" value="üìú Clear History"
    onclick="return confirm('Are you sure you want to clear the extraction history?');">
</form>

<script>
  document.addEventListener('click', function (event) {
    const filePicker = document.getElementById('file-picker-container');
    const destPicker = document.getElementById('dest-picker-container');

    // Helper to check if click was inside a container or input
    function clickInside(element) {
      return element && (element.contains(event.target) || event.target === element);
    }

    // For file picker
    if (filePicker) {
      const inputFile = document.querySelector('input[name="selected_file_display"]');
      if (!clickInside(filePicker) && event.target !== inputFile) {
        // Hide picker container
        filePicker.style.display = 'none';

        // Remove ?filepicker=1 from URL without reloading
        const url = new URL(window.location);
        url.searchParams.delete('filepicker');
        url.searchParams.delete('browse_file');
        // Optionally keep file & dest params if you want
        history.replaceState(null, '', url.toString());
      }
    }

    // For destination picker
    if (destPicker) {
      const inputDest = document.querySelector('input[name="destination_display"]');
      if (!clickInside(destPicker) && event.target !== inputDest) {
        // Hide picker container
        destPicker.style.display = 'none';

        // Remove ?destpicker=1 from URL without reloading
        const url = new URL(window.location);
        url.searchParams.delete('destpicker');
        url.searchParams.delete('browse_dest');
        history.replaceState(null, '', url.toString());
      }
    }
  });
  // Show "processing" message when form is submitted
  document.querySelector('form[method="post"]').addEventListener('submit', function () {
    const msg = document.getElementById('processing-message');
    if (msg) msg.style.display = 'block';
  });
</script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('extract-form');
    const successMsg = document.querySelector('p');

    if (successMsg && successMsg.textContent.includes('‚úÖ Extraction Successful')) {
      // Clear form fields
      form.reset();

      // Also clear the readonly display fields manually
      document.querySelector('input[name="selected_file_display"]').value = '';
      document.querySelector('input[name="destination_display"]').value = '';
      document.querySelector('input[name="selected_file"]').value = '';
      document.querySelector('input[name="destination"]').value = '';
    }
  });
</script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const pwInput = document.getElementById('extract_password');
    const pwPlaceholder = pwInput?.nextElementSibling;

    function togglePasswordPlaceholder() {
      if (pwPlaceholder) {
        pwPlaceholder.style.display = pwInput.value.trim() ? 'none' : 'inline';
      }
    }

    pwInput?.addEventListener('input', togglePasswordPlaceholder);
    togglePasswordPlaceholder(); // Call once on load
  });
</script>